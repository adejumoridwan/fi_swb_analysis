---
title: "mca"
author: "Adejumo Ridwan Suleiman"
format: html
---

```{r}
library(tidyverse)
library(haven)
library(FactoMineR)
library(factoextra)
```

```{r}
mics <- read_csv("datasets/wm_imputed.csv") |> 
  mutate(
    household_id = str_c(HH1, HH2, sep = "_")
  )
```

```{r}
columns_to_exclude <- c("HH1", "HH2", "wmweight", "PSU", "stratum", 
                        "HHAGE", "HH48","household_id")

mics <- mics |> 
  mutate(across(-all_of(columns_to_exclude), as.ordered))
```

```{r}
# Load the necessary libraries
if (!requireNamespace("FactoMineR", quietly = TRUE)) {
  install.packages("FactoMineR")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
  install.packages("ggplot2")
}

library(FactoMineR)
library(ggplot2)

# Function to plot a scree plot for MCA
scree_plot_mca <- function(data) {
  # Check if the data frame is valid
  if (!is.data.frame(data)) {
    stop("Input must be a data frame")
  }

  # Perform MCA analysis using FactoMineR
  mca_result <- MCA(data, graph = FALSE)

  # Extract eigenvalues (inertia)
  eigenvalues <- mca_result$eig[, 1]

  # Create a data frame for plotting
  scree_data <- data.frame(
    Dimension = seq_along(eigenvalues),
    Eigenvalue = eigenvalues,
    CumulativeVariance = cumsum(eigenvalues) / sum(eigenvalues) * 100
  )

  # Plot the scree plot using ggplot2
  ggplot(scree_data, aes(x = Dimension, y = Eigenvalue)) +
    geom_point(size = 3) +
    geom_line(group = 1, color = "blue") +
    geom_bar(aes(x = Dimension, y = Eigenvalue), stat = "identity", fill = "lightblue", alpha = 0.6) +
    geom_text(aes(label = round(CumulativeVariance, 1)), vjust = -0.5, color = "red", size = 3) +
    labs(
      title = "Scree Plot of MCA",
      x = "Dimensions",
      y = "Eigenvalue",
      subtitle = "Cumulative variance explained (%) shown in red"
    ) +
    theme_minimal()
}

```


```{r}

perform_mca <- function(data, n_comp = 1, comp_name = "Component") {
  # Perform MCA
  mca_result <- MCA(data, ncp = n_comp, graph = FALSE)
  
  # Extract the component scores for individuals
  component_scores <- mca_result$ind$coord[, n_comp]
  
  # Convert to tibble with specified column name and return
  component_tibble <- tibble(!!comp_name := component_scores)
  
  return(component_tibble)
}


```


## Financial Inclusion awareness

```{r}
subset = mics |> 
  select(FN1A:FN5)

subset <- subset %>%
  mutate(across(everything(), ~ factor(.x, ordered = TRUE)))

FI = perform_mca(subset, 1,"FI")
scree_plot_mca(subset)
```

## Financial Inclusion usage


subset = mics |> 
  select(FN2:FN1L)

subset <- subset %>%
  mutate(across(everything(), ~ factor(.x, ordered = TRUE)))


FI = perform_mca(subset, 1,"FI")

## Usage of Electronic and Print Information

```{r}
subset = mics |> 
  select(MT1, MT2, MT3, MT4, MT5, MT9, MT10, MT11, MT12)

subset <- subset %>%
  mutate(across(everything(), ~ factor(.x, ordered = TRUE)))

WEU = perform_mca(subset, 1,"WEU")
```

## Feelings of Safety
```{r}
subset = mics |> 
  select(VT20, VT21, VT22A, VT22B, VT22C, VT22D, VT22E, VT22F, VT22X)

subset <- subset %>%
  mutate(across(everything(), ~ factor(.x, ordered = TRUE)))

WFS = perform_mca(subset, 1,"WFS")
```

## Feelings of Abuse

```{r}
subset = mics |> 
  select(DV1A, DV1B, DV1C, DV1D, DV1F)

subset <- subset %>%
  mutate(across(everything(), ~ factor(.x, ordered = TRUE)))

WFA = perform_mca(subset, 1,"WFA")
```

## Household Ownership of print and electronic information 

```{r}
subset = mics |> 
  select(HC7A, HC7B, HC9A, HC11, HC12, HC13)

subset <- subset %>%
  mutate(across(everything(), ~ factor(.x, ordered = TRUE)))

HOE = perform_mca(subset, 1,"HOE")
```

## Awarenesss and Usage of Financial Inclusion Programs

```{r}
subset = mics |> 
  select(ST2_1, ST2_2, ST2_3, ST2_4, ST2_1, ST2_2, ST2_3, ST2_4)

subset <- subset %>%
  mutate(across(everything(), ~ factor(.x, ordered = TRUE)))

UAFIP = perform_mca(subset, 1,"UAFIP")
```

## Usage of Finacial Inclusion Programs

subset = mics |> 
  select()

subset <- subset %>%
  mutate(across(everything(), ~ factor(.x, ordered = TRUE)))

UFIP = perform_mca(subset, 1,"UFIP")


## Subjective Well Being

```{r}
subset = mics |> 
  select(LS1, LS2, LS3, LS4)

subset <- subset %>%
  mutate(across(everything(), ~ factor(.x, ordered = TRUE)))

SWB = perform_mca(subset, 1,"SWB")
scree_plot_mca(subset)
```


```{r}
mics <- bind_cols(mics, FI, WEU, WFS, WFA, HOE, UAFIP,SWB)
```

```{r}
mics <- mics |> 
    mutate(
    SWB_CAT = factor(ntile(SWB, 3),
                     levels = c(1, 2, 3),
                     labels = c(1, 2, 3),
                     ordered = TRUE),
    FIN_CAT = factor(ntile(FI, 3),
                     levels = c(1, 2, 3),
                     labels = c(1, 2, 3),
                     ordered = TRUE),
  )
         
```


```{r}
#mics <- mics |> 
  #mutate(SSWB = as.vector(scale(SWB))) |> 
  #filter(ethnicity %in% c(4,5,6))
```


```{r}
write_dta(mics, "datasets/mics.dta")
```


```{r}
write_csv(mics, "datasets/mics.csv")
```


```{r}
women <- tbl_summary(
    mics,
    include = c(FIN_CAT, WAGE, welevel, MSTATUS, WB18, WM14, zone, HH6),
    by = SWB_CAT, # split table by group
    missing = "no" # don't list missing data separately
  ) |> 
  add_n() |> # add column with total number of non-missing observations
  add_p(all_categorical() ~ "chisq.test") |> 
  modify_header(label = "") |> # update the column header
  bold_labels() |> 
  modify_spanning_header(all_stat_cols() ~ "**Subjective Well Being**") |> 
  modify_header(all_stat_cols() ~ "**{level}**  \nN = {n} ({style_percent(p)}%)")
  
```

```{r}
household <- tbl_summary(
    mics,
    include = c(ethnicity, zone, HH6, HHSEX, HHAGE_CAT, helevel, windex5),
  ) |> 
  add_n() |> # add column with total number of non-missing observations
  modify_header(label = "") |> # update the column header
  bold_labels()
```

```{r}
pca_components <- household <- tbl_summary(
    mics,
    include = c(WEU, WFA, WFS, HOE, UAFIP),
    by=SWB_CAT
  ) |> 
  add_n() |> # add column with total number of non-missing observations
  modify_header(label = "") |> # update the column header
  bold_labels() |> 
  add_p(
    test = list(all_continuous() ~ "oneway.test"))
```

